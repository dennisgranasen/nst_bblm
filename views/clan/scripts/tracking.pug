script.
  class Tracking{
    constructor(clone, excludeFields) {
      this.clone = clone;
      this.excludeFields = excludeFields || [];
      this.excludeFields.push('_original')
    }

    clone = () => {};

    snap() {
      const clone = this.clone();
      clone._original = this;
      return clone;
    }

    stringify = (value) => JSON.stringify(value, (key, val) => this.excludeFields.includes(key) ? undefined : val);

    isDirty() {
      return this._original ? this.stringify(this) !== this.stringify(this._original) : false;
    }

    commit() {
      if (this._original != null) {
        this._original.map(this);
      } else {
        throw 'Model must be snapped before it can be committed.';
      }
    }

    rollback = () => {
        if (this._original != null) {
            this.map(this._original);
        } else {
            throw 'Model must be snapped before it can be rolled back.';
        }
    }
  }