extends ../layout.pug

block scripts
  script(src="https://cdn.rebbl.net/scripts/knockout-3.4.2.js")
  script.
    function DateModel() {
        const self = this;

        self.leagues = ko.observableArray([]);
        self.league = ko.observable();
        self.competition= ko.observable();
        self.competitions = ko.observableArray([]);
        self.contest= ko.observable();
        self.contests = ko.observableArray([]);
        self.state = ko.observable();
        self.cacheKey = ko.observable();

        self.setLeague = function(league){
            if (!league) return;

            self.league(league);
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/api/v1/admin/contest/competitions/"+league,true)
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.responseType = 'json';

            xhr.onload  = function() {//Call a function when the state changes.
                self.competitions(xhr.response);
            }
            xhr.send();
        };

        self.setCompetition = function(comp){
            if (!comp) return;

            self.competition(comp);
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/api/v1/admin/contest/contests/"+self.league()+"/"+self.competition() ,true)
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.responseType = 'json';

            xhr.onload  = function() {//Call a function when the state changes.
                self.contests(xhr.response);
            }
            xhr.send();
        }

        self.setContest = function(contest){
            self.contest(contest);
        }

        self.saveContest = function(){
            console.log(JSON.stringify(self.contest()));

            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/api/v1/admin/contest",true)
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.responseType = 'json';

            xhr.send(JSON.stringify(self.contest()));
        }

        self.clearCache = function(){
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/api/v1/admin/clearcache",true)
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.responseType = 'json';

            xhr.send(JSON.stringify({key:self.cacheKey()}));
        }
        self.reloadConfig =async function(){
          await fetch("/api/v1/admin/contest/reload");
        }

        self.enableSync = async function(){
          await fetch("/api/v1/admin/contest/enableSync",{method:"POST"});
          self.syncState();
        }
        self.disableSync = async function(){
          await fetch("/api/v1/admin/contest/disableSync",{method:"POST"});
          self.syncState();
        }
        self.syncState = async function(){
          let result = await fetch("/api/v1/admin/contest/syncState");
          if (result.ok){
            self.state(await result.json());
          }
        }
        self.testSync = async function(){
          let result =await fetch("/api/v1/admin/contest/test");
          if (result.ok) alert(await result.json());
        }
    }

    ko.bindingHandlers.json = {
        init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called when the binding is first applied to an element
            // Set up any initial state, event handlers, etc. here
            ko.utils.registerEventHandler(element, "change", function () {
                console.log("change");
                var observable = valueAccessor();
                observable(JSON.parse(element.value));
            });


        },
        update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called once when the binding is first applied to an element,
            // and again whenever any observables/computeds that are accessed change
            // Update the DOM element based on the supplied values here.

            var value = valueAccessor();
            if(value())
                element.innerText = JSON.stringify(value());


        }
    };

    const model = new DateModel();
    $(document).ready(async function(){
        ko.applyBindings(model);
        await model.syncState();
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "/api/v1/admin/contest/leagues",true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {//Call a function when the state changes.
          model.leagues(xhr.response);
        }

        xhr.send();

    });

    

block content
  div(class="container")
    div(class="row col-12")
      button(data-bind="click:enableSync" class="btn btn-small btn-success" style="margin:0px 10px") enable sync
      button(data-bind="click:disableSync" class="btn btn-small btn-success" style="margin:0px 10px") disable sync
      button(data-bind="click:testSync,css:state() ? 'btn btn-small btn-success' : 'btn btn-small btn-danger'" class="btn btn-small btn-success" style="margin:0px 10px") test sync
      button(data-bind="click:reloadConfig" class="btn btn-small btn-success" style="margin:0px 10px")
        i(class="fa fa-gavel")
      div(class="input-group mb-3")
        input(type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username" aria-describedby="basic-addon2" data-bind="value:cacheKey")
        div(class="input-group-append")
          button(class="btn btn-outline-secondary" type="button" data-bind="click:clearCache") clear cache
    div(class="row col-12")
      div(class="btn-group")
        button(type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") league
        div(class="dropdown-menu")
          // ko foreach: leagues
          a(class="dropdown-item" href="#" data-bind="text:$data,click: $root.setLeague.bind($data)")
          // /ko
      div(class="btn-group")
        button(type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") competition
        div(class="dropdown-menu")
          // ko foreach: competitions
          a(class="dropdown-item" href="#" data-bind="text:$data,click: $root.setCompetition.bind($data)")
          // /ko        
      div(class="btn-group")
        button(type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") contest
        div(class="dropdown-menu")
          // ko foreach: contests
          a(class="dropdown-item" href="#" data-bind="text: $data.round + ': ' + $data.opponents[0].coach.name + '-' + $data.opponents[1].coach.name ,click: $root.setContest.bind($data)")
          // /ko        
      button(type="button" class="btn btn-primary" data-bind="click:saveContest" ) Save
    div(class="row col-12")
      textarea(name="", cols="50", rows="100" data-bind="json: contest ")