extends ../relayout.pug

block content
  div(class="container")
    table(class="table table-striped")
      tbody
        // ko foreach: skillDescriptions
        tr
          td(data-bind="text: name")
          td(data-bind="text: description")
        // /ko

block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn2.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.
    const SKILLDESCRIPTIONS = "skillDescriptions.v2";
    function loadSkillDescriptions(){
      const storage = window.localStorage;
      let skills = null;
  
      if (storage)    
        skills = localStorage.getItem(SKILLDESCRIPTIONS);

      if(!skills){
        let xhr = new XMLHttpRequest();
        let path = window.location.pathname.split('/');

        xhr.open("GET", "/api/v2/bloodbowl/skillDescriptions"  ,true)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = 'json';

        xhr.onload  = function() {//Call a function when the state changes.
          model.skillDescriptions =xhr.response;
          const storage = window.localStorage;
      
          if (storage)
            storage.setItem(SKILLDESCRIPTIONS, JSON.stringify(xhr.response));    
        }

        xhr.send();
      } else {
        model.skillDescriptions = JSON.parse(skills);
      }
    }

    class ViewModel{
      constructor(){
        this.skillDescriptions = [];
        ko.track(this);
      }
    }

    let model = new ViewModel({});
    ko.applyBindings(model);
    $(document).ready(function(){

      loadSkillDescriptions();
    });