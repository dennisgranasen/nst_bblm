include ../../nav-link

block vars
 - let options = {company: company}

block head
  style.
    body {
      background-color:#1d1e22;
    }
    img {
      max-width: 128px;
      top:-14px;
      position:relative;
    }
    .border{
      border: 1px solid white;
      max-height:100px;
      overflow:hidden;
    }
    .standing{
      background-color:white;
      color:#0a0a0a;
      float: right;
      height:200px;
      width:275px;
      transform: skew(-30deg);
      margin-right:-50px;
      margin-top:-1px
    }
    .unskew{
      transform: skew(30deg);
    }
    .unskew p {
      font-size: 42px;
      font-family: 'Sarpanch', sans-serif;
      margin-left: 50px;
      margin-top: 27px;
      font-weight: 800;
    }        
    .teamText1{
      font-family: 'Sarpanch', sans-serif;
      font-size: 32px;
      font-weight: 800;
      color: white;
      margin-left: 20px;
      margin-top: 10px;
    }
    .teamText2{
      font-family: 'Sarpanch', sans-serif;
      font-size: 48px;
      font-weight: 800;
      color: white;
      margin-left: 58px;
      margin-top: -25px;
    } 
    
    @font-face {
      font-family: 'Sarpanch';
      font-style: normal;
      font-weight: 800;
      font-display: swap;
      src: url(https://cdn2.rebbl.net/fonts/sarpanch.woff2) format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
    
    @font-face {
      font-family: 'Sarpanch';
      font-style: normal;
      font-weight: 800;
      font-display: swap;
      src: url(https://cdn2.rebbl.net/fonts/sarpanch.woff2) format('woff2');
      unicode-range: U+0900-097F, U+1CD0-1CF6, U+1CF8-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FB;
    }

block body
  div(style="display:flex; flex-direction:row")
    // ko foreach: [0,1]
    div(style="flex:1")
      // ko foreach: $root.getData($data)
      // ko if: $data.logo
      .border
        .standing
          .unskew
            p(data-bind="text: `${$data.win}-${$data.draw}-${$data.loss}`")
        div(style="background-color:rgb(244,255,149)")
          div(style="display:flex")
            div
              img(data-bind="attr:{src:`https://cdn2.rebbl.net/images/logo/256x256/logo_${$data.logo.toLowerCase()}.png`}") 
            div
              .teamText1(data-bind="text:teamName1()")
              .teamText2(data-bind="text:teamName2()")
      // /ko
      // /ko
    // /ko
    



block scripts
  - if (process.env.NODE_ENV === 'production')
    script(src="https://cdn2.rebbl.net/scripts/jquery-3.3.1.slim.min.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-3.4.2.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-mapping.min.js")
    script(src="https://cdn2.rebbl.net/scripts/knockout-es5.js")
  - else
    script(src="https://cdn2.rebbl.net/scripts/jquery-3.3.1.slim.min.js")
    script(src="/scripts/knockout-3.4.2.js")
    script(src="/scripts/knockout-mapping.min.js")
    script(src="/scripts/knockout-es5.js")

  script.

    // this allows if to iterate of object properties.
    ko.bindingHandlers.foreachprop = {
        transformObject: function (obj) {
            var properties = [];
            ko.utils.objectForEach(obj, function (key, value) {
                properties.push({ key: key, value: value });
            });
            properties = properties.sort(function(a,b){return a.key > b.key ? 1 : -1;})
            return properties;
        },
        init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var properties = ko.pureComputed(function () {
            var obj = ko.utils.unwrapObservable(valueAccessor());
            return ko.bindingHandlers.foreachprop.transformObject(obj);
            });
            ko.applyBindingsToNode(element, { foreach: properties }, bindingContext);
            return { controlsDescendantBindings: true };
        }
    };

    class StandingsModel{
      constructor(data){
        this.map(data);
        ko.track(this);
      }
      map(data){
        if(data){
          delete data._id;
          Object.assign(this, data);
        }
      }

      teamName1(){
        let name = this.team;
        if (/\[colour=/i.test(this.team)){
            name = this.team.replace(/\[colour=.*]/i,'')
        }
        name = name.trim().split(' ');
        name.splice(-1,1);
        if (name.length === 0) return "\xA0";
        return name.join(' ')
      }
      teamName2(){
        let name = this.team;
        if (/\[colour=/i.test(this.team)){
            name = this.team.replace(/\[colour=.*]/i,'')
        }
        name = name.trim().split(' ');
        return name.splice(-1,1);;
      }
    }


    class ViewModel{
      constructor(data){
        this.donators = [];
        this.league = "";
        this.season = "";
        this.seasons = [];
        this.standings = {};
        this.tickets = [];
        this.admins = [];
        this.challenger =[];
        this.trophies =[];
        this.me = {};

        this.collator = new Intl.Collator(undefined, {numeric: true, sensitivity: "base", ignorePunctuation:true});
        ko.track(this);
      }

      getData(x){
        if (!this.standings.length) return [];
        const half = Math.floor(this.standings.length/2);
        return this.standings.filter((n,i) => i >= (x*half) && i < half + (x*half));
      }

      competitionUrl(comp){
        return `/!{company}/${this.league}/${encodeURIComponent(comp[0].competitionUrl || comp[0].competition)}`;
      };

      async loadTickets(){
        let response = await fetch(`/api/v2/standings/${this.league}/${this.season}/tickets`);
        if (response.ok){
          let data = await response.json()
          this.challenger = data.challenger || [];
          this.tickets = data.cutoff;
        } else {
          this.tickets = [];
          this.challenger = [];
        }
      }

      async loadSeason(){

        this.standings={};
        //this.loadTickets();

        let response = await fetch(`/api/v2/standings/!{league}/season 18/!{competition}`);
        if (response.ok){
          let data  = await response.json();
          data = data.map(x => new StandingsModel(x));
          this.standings=data;
        }   
        const images = document.getElementsByTagName("img");
        for(const img of images){
          var n = await get_average_rgb(img.src);
          console.log(`rgb(${n[0]},${n[1]},${n[2]})`);
          img.parentElement.parentElement.parentElement.style.setProperty('background-color', `rgb(${n[0]},${n[1]},${n[2]})`);
        }             
      }

      _groupBy(xs, key) {
        return xs.reduce(function(rv, x) {
          (rv[x[key]] = rv[x[key]] || []).push(x);
          return rv;
        }, {});
      };
    }

    let model = new ViewModel({});

    function get_average_rgb(src){
      /* https://stackoverflow.com/questions/2541481/get-average-color-of-image-via-javascript */
        return new Promise(resolve => {
          let context = document.createElement('canvas').getContext('2d');      
            context.imageSmoothingEnabled = true;
      
            let img = new Image;
            img.src = src;
            img.setAttribute('crossOrigin', ''); 

            img.onload = () => {
                context.drawImage(img, 0, 0, 1, 1);
              
                resolve(context.getImageData(0, 0, 1, 1).data.slice(0,3));
            };
        });
      }

      (async () => {
        
      })();

    $(document).ready(function(){
      let path = window.location.pathname.split('/');
      model.league = path[path.length-1];
      ko.applyBindings(model);
      model.loadSeason();
    });
    
